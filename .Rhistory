# Build the network
result = build_reactome(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Uniprot",   # column name for genes
met_id = "ChEBI",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
# Access results
head(result$nodeAttrib)
head(result$edgeAttrib)
devtools::document()
devtools::install(force = TRUE)
devtools::document()
devtools::document()
devtools::install(force = TRUE)
library(MetabolicNetwork)
source("data-raw/DATASET.R")
Merged_data = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/mortpac_liver_metab_rna.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
info = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/info_integrate.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
# Standardize column names
m = match(colnames(Merged_data), info$Variable)
m = m[!is.na(m)]
colnames(Merged_data)[colnames(Merged_data) %in% info$Variable] = info$Colname[m]
# Build the network
result = build_reactome(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Uniprot",   # column name for genes
met_id = "ChEBI",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
devtools::document()
devtools::document()
devtools::install(force = TRUE)
library(MetabolicNetwork)
source("data-raw/DATASET.R")
library(MetabolicNetwork)
source("data-raw/DATASET.R")
Merged_data = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/mortpac_liver_metab_rna.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
info = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/info_integrate.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
# Standardize column names
Merged_data = standardize_input(Merged_data, info)
View(Merged_data)
# Build the network
result = build_reactome(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Uniprot",   # column name for genes
met_id = "ChEBI",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
result = build_kegg(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "JEGG",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
test_that("build_reactome returns proper structure and writes files", {
Merged_data = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/mortpac_liver_metab_rna.txt",
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
info = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/info_integrate.txt",
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
# Test with write_output = TRUE
tmp_dir <- tempfile("_out_")
dir.create(tmp_dir)
result = build_kegg(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "JEGG",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
files <- list.files(tmp_dir)
expect_true(all(c("Reactome_nodes.txt",
"Reactome_edges.txt",
"Reactome_edges_solid.txt") %in% files))
})
library(testthat)
test_that("build_reactome returns proper structure and writes files", {
Merged_data = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/mortpac_liver_metab_rna.txt",
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
info = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/info_integrate.txt",
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
# Test with write_output = TRUE
tmp_dir <- tempfile("_out_")
dir.create(tmp_dir)
result = build_kegg(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "JEGG",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
files <- list.files(tmp_dir)
expect_true(all(c("KEGG_nodes.txt",
"KEGG_edges.txt",
"KEGG_edges_solid.txt") %in% files))
})
rlang::last_trace()
devtools::document()
devtools::install(force = TRUE)
library(MetabolicNetwork)
source("data-raw/DATASET.R")
Merged_data = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/mortpac_liver_metab_rna.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
info = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/info_integrate.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
# Standardize column names
Merged_data = standardize_input(Merged_data, info)
library(MetabolicNetwork)
source("data-raw/DATASET.R")
Merged_data = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/mortpac_liver_metab_rna.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
info = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/info_integrate.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
# Standardize column names
Merged_data = standardize_input(Merged_data, info)
result = build_kegg(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "KEGG",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
result = build_hmdb(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "HMDB lip",      # column name for metabolites
size = "Diff_Expand",
write_output = T,
output_dir = "outputs"
)
devtools::document()
getwd
getwd(*)
getwd()
library(testthat)
Merged_data = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/mortpac_liver_metab_rna.txt",
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
info = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/info_integrate.txt",
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
Merged_data = standardize_input(Merged_data, info)
test_that("build_reactome returns proper structure and writes files", {
# Test with write_output = TRUE
tmp_dir <- tempfile("_out_")
dir.create(tmp_dir)
result = build_kegg(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "KEGG",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
files <- list.files(tmp_dir)
expect_true(all(c("KEGG_nodes.txt",
"KEGG_edges.txt",
"KEGG_edges_solid.txt") %in% files))
})
library(testthat)
Merged_data = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/mortpac_liver_metab_rna.txt",
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
info = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/info_integrate.txt",
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
Merged_data = standardize_input(Merged_data, info)
test_that("build_reactome returns proper structure and writes files", {
# Test with write_output = TRUE
tmp_dir <- tempfile("_out_")
dir.create(tmp_dir)
result = build_kegg(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "KEGG",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
files <- list.files(tmp_dir)
expect_true(all(c("KEGG_nodes.txt",
"KEGG_edges.txt",
"KEGG_edges_solid.txt") %in% files))
})
test_that("build_reactome returns proper structure and writes files", {
Merged_data = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/mortpac_liver_metab_rna.txt",
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
info = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/info_integrate.txt",
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
Merged_data = standardize_input(Merged_data, info)
# Test with write_output = TRUE
tmp_dir <- tempfile("_out_")
dir.create(tmp_dir)
result = build_kegg(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "KEGG",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
files <- list.files(tmp_dir)
expect_true(all(c("KEGG_nodes.txt",
"KEGG_edges.txt",
"KEGG_edges_solid.txt") %in% files))
})
dir.create("inst/testdata", recursive = TRUE, showWarnings = FALSE)
testdata_path <- test_path("inst/testdata")
file.path(testdata_path, "mortpac_liver_metab_rna.txt")
getwd()
testdata_path <- test_path("../inst/testdata")
testdata_path
list(testdata_path)
list.files(testdata_path)
list.files()
testdata_path <- test_path("inst/testdata")
list.files(testdata_path)
devtools::document()
getwd()
devtools::document()
devtools::document()
list.files("_out_")
getwd()
tmp_dir
tmp_dir
tmp_dir
files <- list.files(tmp_dir)
list.files("_out_")
devtools::document()
library(MetabolicNetwork)
source("data-raw/DATASET.R")
Merged_data = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/mortpac_liver_metab_rna.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
info = read.delim("../MetIntegrate/Step3_MetabolicNetwork/inputs/info_integrate.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
# Standardize column names
Merged_data = standardize_input(Merged_data, info)
# Build the network
result = build_reactome(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Uniprot",   # column name for genes
met_id = "ChEBI",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
result = build_kegg(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "KEGG",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
result = build_hmdb(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "HMDB lip",      # column name for metabolites
size = "Diff_Expand",
write_output = T,
output_dir = "outputs"
)
reactome.edge = read.delim("outputs/Reactome_edges.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
reactome.node = read.delim("outputs/Reactome_nodes.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
kegg.edge = read.delim("outputs/KEGG_edges.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
kegg.node = read.delim("outputs/KEGG_nodes.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
hmdb.edge = read.delim("outputs/HMDB_edges.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
hmdb.node = read.delim("outputs/HMDB_nodes.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
result = merge_network(
reactome.edge,
reactome.node,
kegg.edge,
kegg.node,
hmdb.edge,
hmdb.node,
write_output = T,
output_dir = "outputs"
)
devtools::document()
devtools::install(force = TRUE)
library(MetabolicNetwork)
source("data-raw/DATASET_RNO.R")
data_path = system.file("testdata", package = "MetabolicNetwork")
Merged_data = read.delim(file.path(data_path, "mortpac_liver_metab_rna.txt"),
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
info = read.delim(file.path(data_path, "info_integrate.txt"),
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
# Standardize column names
Merged_data = standardize_input(Merged_data, info)
# Build the network
result = build_reactome(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Uniprot",   # column name for genes
met_id = "ChEBI",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
result = build_kegg(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "KEGG",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
result = build_hmdb(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "HMDB lip",      # column name for metabolites
size = "Diff_Expand",
write_output = T,
output_dir = "outputs"
)
reactome.edge = read.delim("outputs/Reactome_edges.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
reactome.node = read.delim("outputs/Reactome_nodes.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
kegg.edge = read.delim("outputs/KEGG_edges.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
kegg.node = read.delim("outputs/KEGG_nodes.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
hmdb.edge = read.delim("outputs/HMDB_edges.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
hmdb.node = read.delim("outputs/HMDB_nodes.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
result = merge_network(
reactome.edge,
reactome.node,
kegg.edge,
kegg.node,
hmdb.edge,
hmdb.node,
write_output = T,
output_dir = "outputs"
)
devtools::document()
devtools::install(force = TRUE)
library(MetabolicNetwork)
source("data-raw/DATASET_RNO.R")
data_path = system.file("testdata", package = "MetabolicNetwork")
Merged_data = read.delim(file.path(data_path, "mortpac_liver_metab_rna.txt"),
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
info = read.delim(file.path(data_path, "info_integrate.txt"),
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
# Standardize column names
Merged_data = standardize_input(Merged_data, info)
# Build the network
result = build_reactome(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Uniprot",   # column name for genes
met_id = "ChEBI",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
result = build_kegg(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "KEGG",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
result = build_hmdb(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "HMDB lip",      # column name for metabolites
size = "Diff_Expand",
write_output = T,
output_dir = "outputs"
)
reactome.edge = read.delim("outputs/Reactome_edges.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
reactome.node = read.delim("outputs/Reactome_nodes.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
kegg.edge = read.delim("outputs/KEGG_edges.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
kegg.node = read.delim("outputs/KEGG_nodes.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
hmdb.edge = read.delim("outputs/HMDB_edges.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
hmdb.node = read.delim("outputs/HMDB_nodes.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
result = merge_network(
reactome.edge,
reactome.node,
kegg.edge,
kegg.node,
hmdb.edge,
hmdb.node,
write_output = T,
output_dir = "outputs"
)
devtools::document()
devtools::install(force = TRUE)
library(MetabolicNetwork)
source("data-raw/DATASET_RNO.R")
data_path = system.file("testdata", package = "MetabolicNetwork")
Merged_data = read.delim(file.path(data_path, "mortpac_liver_metab_rna.txt"),
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
info = read.delim(file.path(data_path, "info_integrate.txt"),
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
# Standardize column names
Merged_data = standardize_input(Merged_data, info)
# Build the network
result = build_reactome(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Uniprot",   # column name for genes
met_id = "ChEBI",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
devtools::document()
devtools::install(force = TRUE)
library(MetabolicNetwork)
source("data-raw/DATASET_RNO.R")
data_path = system.file("testdata", package = "MetabolicNetwork")
Merged_data = read.delim(file.path(data_path, "mortpac_liver_metab_rna.txt"),
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
info = read.delim(file.path(data_path, "info_integrate.txt"),
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
# Standardize column names
Merged_data = standardize_input(Merged_data, info)
library(MetabolicNetwork)
source("data-raw/DATASET_RNO.R")
data_path = system.file("testdata", package = "MetabolicNetwork")
Merged_data = read.delim(file.path(data_path, "mortpac_liver_metab_rna.txt"),
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
info = read.delim(file.path(data_path, "info_integrate.txt"),
as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
# Standardize column names
Merged_data = standardize_input(Merged_data, info)
# Build the network
result = build_reactome(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Uniprot",   # column name for genes
met_id = "ChEBI",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
result = build_kegg(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "KEGG",      # column name for metabolites
size = "MetMN_Expand",
write_output = T,
output_dir = "outputs"
)
result = build_hmdb(
Merged_data = Merged_data,
info = info,
species = "rno",       # or "mmu"/"hsa"
gene_id = "Gene name",   # column name for genes
met_id = "HMDB lip",      # column name for metabolites
size = "Diff_Expand",
write_output = T,
output_dir = "outputs"
)
reactome.edge = read.delim("outputs/Reactome_edges.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
reactome.node = read.delim("outputs/Reactome_nodes.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
kegg.edge = read.delim("outputs/KEGG_edges.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
kegg.node = read.delim("outputs/KEGG_nodes.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
hmdb.edge = read.delim("outputs/HMDB_edges.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
hmdb.node = read.delim("outputs/HMDB_nodes.txt", as.is = T, check.names = F, header = T, na.strings = c("", " ", NA))
result = merge_network(
reactome.edge,
reactome.node,
kegg.edge,
kegg.node,
hmdb.edge,
hmdb.node,
write_output = T,
output_dir = "outputs"
)
