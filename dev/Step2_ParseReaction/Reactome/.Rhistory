tmp = reaction.mouse$`Reaction ID` == r
reaction.mouse$TopPathway[tmp] = paste0(unique(mmu_topPW$TopPathway[pw]), collapse = " | ")
reaction.mouse$TopPathwayID[tmp] = paste0(unique(mmu_topPW$TopPathwayID[pw]), collapse = " | ")
reaction.mouse$Pathway[tmp] = paste0(unique(mmu_topPW$`Pathway Name`[pw]), collapse = " | ")
reaction.mouse$PathwayID[tmp] = paste0(unique(mmu_topPW$`Pathway ID`[pw]), collapse = " | ")
}
### Annotate rat
reaction.rat$TopPathwayID = NA
reaction.rat$TopPathway = NA
reaction.rat$PathwayID = NA
reaction.rat$Pathway = NA
ls = unique(reaction.rat$`Reaction ID`)
for (i in 1:length(ls)){
if(i %% 1000 == 0) print(i)
r = ls[i]
pw = rno_topPW$`Reaction stID` == r
tmp = reaction.rat$`Reaction ID` == r
reaction.rat$TopPathway[tmp] = paste0(unique(rno_topPW$TopPathway[pw]), collapse = " | ")
reaction.rat$TopPathwayID[tmp] = paste0(unique(rno_topPW$TopPathwayID[pw]), collapse = " | ")
reaction.rat$Pathway[tmp] = paste0(unique(rno_topPW$`Pathway Name`[pw]), collapse = " | ")
reaction.rat$PathwayID[tmp] = paste0(unique(rno_topPW$`Pathway ID`[pw]), collapse = " | ")
}
# rearrange the column sequence
reaction.human = reaction.human[,c("TopPathwayID", "TopPathway", "PathwayID", "Pathway",
"Reaction ID", "Reaction Name", "Class Name", "Entity ID",
"Entity Name", "Schema Class", "Type", "Entity stID", "participant_id",
"participant_name", "participant_type", "participant_stId", "ChEBI_ID",
"UniProt")]
reaction.mouse = reaction.mouse[,c("TopPathwayID", "TopPathway", "PathwayID", "Pathway",
"Reaction ID", "Reaction Name", "Class Name", "Entity ID",
"Entity Name", "Schema Class", "Type", "Entity stID", "participant_id",
"participant_name", "participant_type", "participant_stId", "ChEBI_ID",
"UniProt")]
reaction.rat = reaction.rat[,c("TopPathwayID", "TopPathway", "PathwayID", "Pathway",
"Reaction ID", "Reaction Name", "Class Name", "Entity ID",
"Entity Name", "Schema Class", "Type", "Entity stID", "participant_id",
"participant_name", "participant_type", "participant_stId", "ChEBI_ID",
"UniProt")]
# Annotate common metabolites and tissue-specific metabolites
ChEBI.reaction = read.delim("inputs/ChEBI2Reactome_PE_Reactions.txt", as.is = T, check.names = F, header = T)
ChEBI.reaction.HSA = ChEBI.reaction[ChEBI.reaction$Species == "Homo sapiens",]
ChEBI.reaction.MMU = ChEBI.reaction[ChEBI.reaction$Species == "Mus musculus",]
ChEBI.reaction.RNO = ChEBI.reaction[ChEBI.reaction$Species == "Rattus norvegicus",]
freq.hsa = data.frame(table(ChEBI.reaction.HSA$ChEBI))
freq.mmu = data.frame(table(ChEBI.reaction.MMU$ChEBI))
freq.rno = data.frame(table(ChEBI.reaction.RNO$ChEBI))
m = match(reaction.human$ChEBI_ID, freq.hsa$Var1)
reaction.human$ChEBI_Freq = freq.hsa$Freq[m]
m = match(reaction.mouse$ChEBI_ID, freq.mmu$Var1)
reaction.mouse$ChEBI_Freq = freq.mmu$Freq[m]
m = match(reaction.rat$ChEBI_ID, freq.rno$Var1)
reaction.rat$ChEBI_Freq = freq.rno$Freq[m]
write.table(reaction.human, "final_parsed_info/Reactome_reaction_HSA.txt", quote = F, sep = "\t", na = "", row.names = F)
write.table(reaction.mouse, "final_parsed_info/Reactome_reaction_MMU.txt", quote = F, sep = "\t", na = "", row.names = F)
write.table(reaction.rat, "final_parsed_info/Reactome_reaction_RNO.txt", quote = F, sep = "\t", na = "", row.names = F)
View(reaction.rat)
View(reaction.rat)
tmp.human = reaction.human[grepl("Metabolism", reaction.human$TopPathway), ]
View(tmp.human)
tmp = reaction.human[grepl("Metabolism", reaction.human$TopPathway), ]
length(unique(tmp$ChEBI_ID))
length(unique(tmp$UniProt))
tmp = reaction.mouse[grepl("Metabolism", reaction.mouse$TopPathway), ]
length(unique(tmp$ChEBI_ID))
length(unique(tmp$UniProt))
tmp = reaction.rat[grepl("Metabolism", reaction.rat$TopPathway), ]
length(unique(tmp$ChEBI_ID))
length(unique(tmp$UniProt))
tmp = reaction.human
length(unique(tmp$ChEBI_ID))
length(unique(tmp$UniProt))
tmp = reaction.mouse
length(unique(tmp$ChEBI_ID))
length(unique(tmp$UniProt))
tmp = reaction.rat
length(unique(tmp$ChEBI_ID))
length(unique(tmp$UniProt))
############################## Reaction details parsed from Reactome
rm(list = ls()[])
# 1. Reaction details: Reaction ID, participants, class of participants, role of participants
# 2. Reactions in pathways
# 3. External identifier --> compounds in ChEBI
# 4. External identifier --> proteins in Uniprot
# 5. Proteins forming complexes
reaction = read.csv("outputs/reaction_entities_details_v2.csv", as.is = T, check.names = F, header = T)
pathway_reaction = read.csv("outputs/pathway_reaction_relationships.csv", as.is = T, check.names = F, header = T)
ChEBI = read.delim("inputs/ChEBI2Reactome_PE_Reactions.txt", as.is = T, check.names = F, header = T)
Uniprot = read.delim("inputs/UniProt2Reactome_PE_Reactions.txt", as.is = T, check.names = F, header = T)
complex = read.csv("outputs/complex_participants_details.csv", as.is = T, check.names = F, header = T)
######## Task1: expand the reaction list by complex ID mapping
library(dplyr)
library(tidyr)
# Merge the complex information into the reaction table
reaction = reaction %>%
left_join(complex, by = c("Entity stID" = "complex_id"), relationship = "many-to-many")
x = is.na(reaction$participant_id)
reaction$participant_id[x] = reaction$`Entity ID`[x]
reaction$participant_name[x] = reaction$`Entity Name`[x]
reaction$participant_type[x] = reaction$`Schema Class`[x]
x = is.na(reaction$participant_stId)
reaction$participant_stId[x] = reaction$`Entity stID`[x]
reaction = reaction[,-grep("complex_name", colnames(reaction))]
######## Task2, append ChEBI and Uniprot identifiers and names
colnames(ChEBI)[1] = "ExternalID"
colnames(Uniprot)[1] = "ExternalID"
ChEBI$Class = "Compound"
Uniprot$Class = "Protein"
all(colnames(ChEBI) == colnames(Uniprot))
reaction$participant_id = as.character(reaction$participant_id)
### Add ChEBI to the reaction list
ChEBI$EntityID = unlist(sapply(ChEBI$stID, function(x)strsplit(x, "-")[[1]][3]))
#reaction = reaction %>%
#  left_join(ChEBI[,c("ReactionID", "EntityID", "ExternalID")],
#            by = c("Reaction ID" = "ReactionID", "participant_id" = "EntityID"))
ChEBI = ChEBI[,c("EntityID", "ExternalID")]
ChEBI = ChEBI[!duplicated(ChEBI), ]
reaction = reaction %>%
left_join(ChEBI,
by = c("participant_id" = "EntityID"))
names(reaction)[colnames(reaction) == "ExternalID"] = "ChEBI_ID"
# Replace the identifier for NAD+ --> it was annotated as NAD- in ChEBI
x = reaction$ChEBI_ID == "57540"
y = grepl("NAD+", reaction$`Entity Name`)
reaction$ChEBI_ID[x & y] = "15846"
# Replace the identifier for NADP+ --> it was annotated as NADP 3- in ChEBI
x = reaction$ChEBI_ID == "58349"
y = grepl("NADP+", reaction$`Entity Name`)
reaction$ChEBI_ID[x & y] = "18009"
# Replace the identifier for NADPH --> it was annotated as NADP 3- in ChEBI
x = reaction$ChEBI_ID == "57783"
y = grepl("NADPH", reaction$`Entity Name`)
reaction$ChEBI_ID[x & y] = "16474"
### Add Uniprot to the reaction list
Uniprot$EntityID = unlist(sapply(Uniprot$stID, function(x)strsplit(x, "-")[[1]][3]))
Uniprot.tmp1 = Uniprot[,c("stID", "ExternalID")]
Uniprot.tmp1  = Uniprot.tmp1 [!duplicated(Uniprot.tmp1 ), ]
reaction = reaction %>%
left_join(Uniprot.tmp1 , by = c("participant_stId" = "stID")) # Species info included
names(reaction)[colnames(reaction) == "ExternalID"] = "UniProt"
### 2nd match: name for the same species
xx = is.na(reaction$UniProt) & is.na(reaction$ChEBI_ID) &
reaction$participant_type == "EntityWithAccessionedSequence"
species = unlist(sapply(reaction$`Reaction ID`, function(x)strsplit(x, "-")[[1]][2]))
species2 = unlist(sapply(Uniprot$stID, function(x)strsplit(x, "-")[[1]][2]))
name = unlist(sapply(reaction$participant_name, function(x)strsplit(x, " ")[[1]][1]))
name = unlist(sapply(name, function(x)strsplit(x, "\\(")[[1]][1]))
name2 = unlist(sapply(Uniprot$Name, function(x)strsplit(x, " ")[[1]][1]))
name2 = unlist(sapply(name2, function(x)strsplit(x, "\\(")[[1]][1]))
name.reaction = paste0(name[xx], species[xx])
name.prot = paste0(name2, species2)
m = match(name.reaction, name.prot)
reaction$UniProt[xx] = Uniprot$ExternalID[m]
### 3rd match: gene name to Uniprot (All missing Uniprot IDs are human IDs)
#uniprot.human = read.delim("inputs/uniprotkb_human_reviewed.tsv", as.is = T, check.names = F, header = T)
#name = unlist(sapply(reaction$participant_name, function(x)strsplit(x, " ")[[1]][1]))
#name = unlist(sapply(name, function(x)strsplit(x, "\\(")[[1]][1]))
#table(name[xx] %in% uniprot.human$`Gene Names (primary)`)
#m = match(name[xx], uniprot.human$`Gene Names (primary)`)
#reaction$UniProt[xx] = uniprot.human$Entry[m]
# check missing id
xx = is.na(reaction$UniProt) & is.na(reaction$ChEBI_ID) &
reaction$participant_type == "EntityWithAccessionedSequence"
missing = reaction[xx,]
# Missing identifiers: mRNA (not protein) or not reviewed Uniprot (no further matching steps)
### split into three data frames
reaction.human = reaction[grep("HSA", reaction$`Reaction ID`),]
reaction.mouse = reaction[grep("MMU", reaction$`Reaction ID`),]
reaction.rat = reaction[grep("RNO", reaction$`Reaction ID`),]
# Load required libraries
library(dplyr)
# Extract top-level pathways
top_level_pathways = pw2pw %>%
filter(!(pathway1 %in% pathway2)) %>%
distinct(pathway1) %>%
pull(pathway1)
######### Parse relationships: pathway-2-reaction; pathway-2-pathway
pw2reaction = read.csv("outputs/pathway_reaction_relationships.csv", as.is = T, check.names = F, header = T)
pw2pw = read.delim("inputs/ReactomePathwaysRelation.txt", as.is = T, check.names = F, header = F)
colnames(pw2pw) = c("pathway1", "pathway2")
# Load required libraries
library(dplyr)
# Extract top-level pathways
top_level_pathways = pw2pw %>%
filter(!(pathway1 %in% pathway2)) %>%
distinct(pathway1) %>%
pull(pathway1)
get_top_level_named =  function(prefix) {
pathways = top_level_pathways[grep(prefix, top_level_pathways)]
names(pathways) = pw2reaction$`Pathway Name`[match(pathways, pw2reaction$`Pathway ID`)]
return(pathways)
}
top_paths =  list(
HSA = get_top_level_named("HSA"),
MMU = get_top_level_named("MMU"),
RNO = get_top_level_named("RNO")
)
annotate_top_pathways =  function(pathways, species) {
res = NULL
for (pw in pathways) {
offspring = unlist(find_offspring(pw, pw2pw))
tmp = pw2reaction[pw2reaction$`Pathway ID` %in% offspring,]
tmp = cbind(TopPathwayID = pw,
TopPathway = names(pw),
tmp)
res = rbind(res, tmp)
}
return(res)
}
species_topPW = list(
HSA = annotate_top_pathways(top_paths$HSA, "HSA"),
MMU = annotate_top_pathways(top_paths$MMU, "MMU"),
RNO = annotate_top_pathways(top_paths$RNO, "RNO")
)
find_offspring = function(pathway_id, pathway_df, visited = NULL) {
if (is.null(visited)) {
visited = list()
}
visited = c(visited, pathway_id)
children = pathway_df %>%
filter(pathway1 == pathway_id) %>%
pull(pathway2)
for (child in children) {
if (!(child %in% visited)) {
visited = find_offspring(child, pathway_df, visited)
}
}
return(visited)
}
# Load required libraries
library(dplyr)
# Extract top-level pathways
top_level_pathways = pw2pw %>%
filter(!(pathway1 %in% pathway2)) %>%
distinct(pathway1) %>%
pull(pathway1)
get_top_level_named =  function(prefix) {
pathways = top_level_pathways[grep(prefix, top_level_pathways)]
names(pathways) = pw2reaction$`Pathway Name`[match(pathways, pw2reaction$`Pathway ID`)]
return(pathways)
}
top_paths =  list(
HSA = get_top_level_named("HSA"),
MMU = get_top_level_named("MMU"),
RNO = get_top_level_named("RNO")
)
annotate_top_pathways =  function(pathways, species) {
res = NULL
for (pw in pathways) {
offspring = unlist(find_offspring(pw, pw2pw))
tmp = pw2reaction[pw2reaction$`Pathway ID` %in% offspring,]
tmp = cbind(TopPathwayID = pw,
TopPathway = names(pw),
tmp)
res = rbind(res, tmp)
}
return(res)
}
species_topPW = list(
HSA = annotate_top_pathways(top_paths$HSA, "HSA"),
MMU = annotate_top_pathways(top_paths$MMU, "MMU"),
RNO = annotate_top_pathways(top_paths$RNO, "RNO")
)
############################## Reaction details parsed from Reactome
rm(list = ls()[])
# 1. Reaction details: Reaction ID, participants, class of participants, role of participants
# 2. Reactions in pathways
# 3. External identifier --> compounds in ChEBI
# 4. External identifier --> proteins in Uniprot
# 5. Proteins forming complexes
reaction = read.csv("outputs/reaction_entities_details_v2.csv", as.is = T, check.names = F, header = T)
pathway_reaction = read.csv("outputs/pathway_reaction_relationships.csv", as.is = T, check.names = F, header = T)
ChEBI = read.delim("inputs/ChEBI2Reactome_PE_Reactions.txt", as.is = T, check.names = F, header = T)
Uniprot = read.delim("inputs/UniProt2Reactome_PE_Reactions.txt", as.is = T, check.names = F, header = T)
complex = read.csv("outputs/complex_participants_details.csv", as.is = T, check.names = F, header = T)
######## Task1: expand the reaction list by complex ID mapping
library(dplyr)
library(tidyr)
# Merge the complex information into the reaction table
reaction = reaction %>%
left_join(complex, by = c("Entity stID" = "complex_id"), relationship = "many-to-many")
x = is.na(reaction$participant_id)
reaction$participant_id[x] = reaction$`Entity ID`[x]
reaction$participant_name[x] = reaction$`Entity Name`[x]
reaction$participant_type[x] = reaction$`Schema Class`[x]
x = is.na(reaction$participant_stId)
reaction$participant_stId[x] = reaction$`Entity stID`[x]
reaction = reaction[,-grep("complex_name", colnames(reaction))]
######## Task2, append ChEBI and Uniprot identifiers and names
colnames(ChEBI)[1] = "ExternalID"
colnames(Uniprot)[1] = "ExternalID"
ChEBI$Class = "Compound"
Uniprot$Class = "Protein"
all(colnames(ChEBI) == colnames(Uniprot))
reaction$participant_id = as.character(reaction$participant_id)
### Add ChEBI to the reaction list
ChEBI$EntityID = unlist(sapply(ChEBI$stID, function(x)strsplit(x, "-")[[1]][3]))
#reaction = reaction %>%
#  left_join(ChEBI[,c("ReactionID", "EntityID", "ExternalID")],
#            by = c("Reaction ID" = "ReactionID", "participant_id" = "EntityID"))
ChEBI = ChEBI[,c("EntityID", "ExternalID")]
ChEBI = ChEBI[!duplicated(ChEBI), ]
reaction = reaction %>%
left_join(ChEBI,
by = c("participant_id" = "EntityID"))
names(reaction)[colnames(reaction) == "ExternalID"] = "ChEBI_ID"
# Replace the identifier for NAD+ --> it was annotated as NAD- in ChEBI
x = reaction$ChEBI_ID == "57540"
y = grepl("NAD+", reaction$`Entity Name`)
reaction$ChEBI_ID[x & y] = "15846"
# Replace the identifier for NADP+ --> it was annotated as NADP 3- in ChEBI
x = reaction$ChEBI_ID == "58349"
y = grepl("NADP+", reaction$`Entity Name`)
reaction$ChEBI_ID[x & y] = "18009"
# Replace the identifier for NADPH --> it was annotated as NADP 3- in ChEBI
x = reaction$ChEBI_ID == "57783"
y = grepl("NADPH", reaction$`Entity Name`)
reaction$ChEBI_ID[x & y] = "16474"
### Add Uniprot to the reaction list
Uniprot$EntityID = unlist(sapply(Uniprot$stID, function(x)strsplit(x, "-")[[1]][3]))
Uniprot.tmp1 = Uniprot[,c("stID", "ExternalID")]
Uniprot.tmp1  = Uniprot.tmp1 [!duplicated(Uniprot.tmp1 ), ]
reaction = reaction %>%
left_join(Uniprot.tmp1 , by = c("participant_stId" = "stID")) # Species info included
names(reaction)[colnames(reaction) == "ExternalID"] = "UniProt"
### 2nd match: name for the same species
xx = is.na(reaction$UniProt) & is.na(reaction$ChEBI_ID) &
reaction$participant_type == "EntityWithAccessionedSequence"
species = unlist(sapply(reaction$`Reaction ID`, function(x)strsplit(x, "-")[[1]][2]))
species2 = unlist(sapply(Uniprot$stID, function(x)strsplit(x, "-")[[1]][2]))
name = unlist(sapply(reaction$participant_name, function(x)strsplit(x, " ")[[1]][1]))
name = unlist(sapply(name, function(x)strsplit(x, "\\(")[[1]][1]))
name2 = unlist(sapply(Uniprot$Name, function(x)strsplit(x, " ")[[1]][1]))
name2 = unlist(sapply(name2, function(x)strsplit(x, "\\(")[[1]][1]))
name.reaction = paste0(name[xx], species[xx])
name.prot = paste0(name2, species2)
m = match(name.reaction, name.prot)
reaction$UniProt[xx] = Uniprot$ExternalID[m]
### 3rd match: gene name to Uniprot (All missing Uniprot IDs are human IDs)
#uniprot.human = read.delim("inputs/uniprotkb_human_reviewed.tsv", as.is = T, check.names = F, header = T)
#name = unlist(sapply(reaction$participant_name, function(x)strsplit(x, " ")[[1]][1]))
#name = unlist(sapply(name, function(x)strsplit(x, "\\(")[[1]][1]))
#table(name[xx] %in% uniprot.human$`Gene Names (primary)`)
#m = match(name[xx], uniprot.human$`Gene Names (primary)`)
#reaction$UniProt[xx] = uniprot.human$Entry[m]
# check missing id
xx = is.na(reaction$UniProt) & is.na(reaction$ChEBI_ID) &
reaction$participant_type == "EntityWithAccessionedSequence"
missing = reaction[xx,]
# Missing identifiers: mRNA (not protein) or not reviewed Uniprot (no further matching steps)
### split into three data frames
reaction.human = reaction[grep("HSA", reaction$`Reaction ID`),]
reaction.mouse = reaction[grep("MMU", reaction$`Reaction ID`),]
reaction.rat = reaction[grep("RNO", reaction$`Reaction ID`),]
######### Parse relationships: pathway-2-reaction; pathway-2-pathway
pw2reaction = read.csv("outputs/pathway_reaction_relationships.csv", as.is = T, check.names = F, header = T)
pw2pw = read.delim("inputs/ReactomePathwaysRelation.txt", as.is = T, check.names = F, header = F)
colnames(pw2pw) = c("pathway1", "pathway2")
find_offspring = function(pathway_id, pathway_df, visited = NULL) {
if (is.null(visited)) {
visited = list()
}
visited = c(visited, pathway_id)
children = pathway_df %>%
filter(pathway1 == pathway_id) %>%
pull(pathway2)
for (child in children) {
if (!(child %in% visited)) {
visited = find_offspring(child, pathway_df, visited)
}
}
return(visited)
}
######### Annotate all reactions using top level pathways
top_level_pathways = pw2pw %>%
filter(!(pathway1 %in% pathway2)) %>%
distinct(pathway1) %>%
pull(pathway1)
top_level_pathways.hsa = top_level_pathways[grep("HSA", top_level_pathways)]
top_level_pathways.mmu = top_level_pathways[grep("MMU", top_level_pathways)]
top_level_pathways.rno = top_level_pathways[grep("RNO", top_level_pathways)]
names(top_level_pathways.hsa) = pw2reaction$`Pathway Name`[match(top_level_pathways.hsa, pw2reaction$`Pathway ID`)]
names(top_level_pathways.mmu) = pw2reaction$`Pathway Name`[match(top_level_pathways.mmu, pw2reaction$`Pathway ID`)]
names(top_level_pathways.rno) = pw2reaction$`Pathway Name`[match(top_level_pathways.rno, pw2reaction$`Pathway ID`)]
hsa_topPW = NULL
for (i in 1:length(top_level_pathways.hsa)){
pw = top_level_pathways.hsa[i]
tmp1 = unlist(find_offspring(pw, pw2pw))
tmp2 = pw2reaction[pw2reaction$`Pathway ID` %in% tmp1,]
tmp2 = cbind("TopPathwayID" = rep(pw, nrow(tmp2)),
"TopPathway" = rep(names(pw), nrow(tmp2)), tmp2)
hsa_topPW = rbind(hsa_topPW, tmp2)
}
mmu_topPW = NULL
for (i in 1:length(top_level_pathways.mmu)){
pw = top_level_pathways.mmu[i]
tmp1 = unlist(find_offspring(pw, pw2pw))
tmp2 = pw2reaction[pw2reaction$`Pathway ID` %in% tmp1,]
tmp2 = cbind("TopPathwayID" = rep(pw, nrow(tmp2)),
"TopPathway" = rep(names(pw), nrow(tmp2)), tmp2)
mmu_topPW = rbind(mmu_topPW, tmp2)
}
rno_topPW = NULL
for (i in 1:length(top_level_pathways.rno)){
pw = top_level_pathways.rno[i]
tmp1 = unlist(find_offspring(pw, pw2pw))
tmp2 = pw2reaction[pw2reaction$`Pathway ID` %in% tmp1,]
tmp2 = cbind("TopPathwayID" = rep(pw, nrow(tmp2)),
"TopPathway" = rep(names(pw), nrow(tmp2)), tmp2)
rno_topPW = rbind(rno_topPW, tmp2)
}
### Annotate human first
reaction.human$TopPathwayID = NA
reaction.human$TopPathway = NA
reaction.human$PathwayID = NA
reaction.human$Pathway = NA
ls = unique(reaction.human$`Reaction ID`)
for (i in 1:length(ls)){
if(i %% 1000 == 0) print(i)
r = ls[i]
pw = hsa_topPW$`Reaction stID` == r
tmp = reaction.human$`Reaction ID` == r
reaction.human$TopPathway[tmp] = paste0(unique(hsa_topPW$TopPathway[pw]), collapse = " | ")
reaction.human$TopPathwayID[tmp] = paste0(unique(hsa_topPW$TopPathwayID[pw]), collapse = " | ")
reaction.human$Pathway[tmp] = paste0(unique(hsa_topPW$`Pathway Name`[pw]), collapse = " | ")
reaction.human$PathwayID[tmp] = paste0(unique(hsa_topPW$`Pathway ID`[pw]), collapse = " | ")
}
### Annotate mouse
reaction.mouse$TopPathwayID = NA
reaction.mouse$TopPathway = NA
reaction.mouse$PathwayID = NA
reaction.mouse$Pathway = NA
ls = unique(reaction.mouse$`Reaction ID`)
for (i in 1:length(ls)){
if(i %% 1000 == 0) print(i)
r = ls[i]
pw = mmu_topPW$`Reaction stID` == r
tmp = reaction.mouse$`Reaction ID` == r
reaction.mouse$TopPathway[tmp] = paste0(unique(mmu_topPW$TopPathway[pw]), collapse = " | ")
reaction.mouse$TopPathwayID[tmp] = paste0(unique(mmu_topPW$TopPathwayID[pw]), collapse = " | ")
reaction.mouse$Pathway[tmp] = paste0(unique(mmu_topPW$`Pathway Name`[pw]), collapse = " | ")
reaction.mouse$PathwayID[tmp] = paste0(unique(mmu_topPW$`Pathway ID`[pw]), collapse = " | ")
}
### Annotate rat
reaction.rat$TopPathwayID = NA
reaction.rat$TopPathway = NA
reaction.rat$PathwayID = NA
reaction.rat$Pathway = NA
ls = unique(reaction.rat$`Reaction ID`)
for (i in 1:length(ls)){
if(i %% 1000 == 0) print(i)
r = ls[i]
pw = rno_topPW$`Reaction stID` == r
tmp = reaction.rat$`Reaction ID` == r
reaction.rat$TopPathway[tmp] = paste0(unique(rno_topPW$TopPathway[pw]), collapse = " | ")
reaction.rat$TopPathwayID[tmp] = paste0(unique(rno_topPW$TopPathwayID[pw]), collapse = " | ")
reaction.rat$Pathway[tmp] = paste0(unique(rno_topPW$`Pathway Name`[pw]), collapse = " | ")
reaction.rat$PathwayID[tmp] = paste0(unique(rno_topPW$`Pathway ID`[pw]), collapse = " | ")
}
# rearrange the column sequence
reaction.human = reaction.human[,c("TopPathwayID", "TopPathway", "PathwayID", "Pathway",
"Reaction ID", "Reaction Name", "Class Name", "Entity ID",
"Entity Name", "Schema Class", "Type", "Entity stID", "participant_id",
"participant_name", "participant_type", "participant_stId", "ChEBI_ID",
"UniProt")]
reaction.mouse = reaction.mouse[,c("TopPathwayID", "TopPathway", "PathwayID", "Pathway",
"Reaction ID", "Reaction Name", "Class Name", "Entity ID",
"Entity Name", "Schema Class", "Type", "Entity stID", "participant_id",
"participant_name", "participant_type", "participant_stId", "ChEBI_ID",
"UniProt")]
reaction.rat = reaction.rat[,c("TopPathwayID", "TopPathway", "PathwayID", "Pathway",
"Reaction ID", "Reaction Name", "Class Name", "Entity ID",
"Entity Name", "Schema Class", "Type", "Entity stID", "participant_id",
"participant_name", "participant_type", "participant_stId", "ChEBI_ID",
"UniProt")]
# Annotate common metabolites and tissue-specific metabolites
ChEBI.reaction = read.delim("inputs/ChEBI2Reactome_PE_Reactions.txt", as.is = T, check.names = F, header = T)
ChEBI.reaction.HSA = ChEBI.reaction[ChEBI.reaction$Species == "Homo sapiens",]
ChEBI.reaction.MMU = ChEBI.reaction[ChEBI.reaction$Species == "Mus musculus",]
ChEBI.reaction.RNO = ChEBI.reaction[ChEBI.reaction$Species == "Rattus norvegicus",]
freq.hsa = data.frame(table(ChEBI.reaction.HSA$ChEBI))
freq.mmu = data.frame(table(ChEBI.reaction.MMU$ChEBI))
freq.rno = data.frame(table(ChEBI.reaction.RNO$ChEBI))
m = match(reaction.human$ChEBI_ID, freq.hsa$Var1)
reaction.human$ChEBI_Freq = freq.hsa$Freq[m]
m = match(reaction.mouse$ChEBI_ID, freq.mmu$Var1)
reaction.mouse$ChEBI_Freq = freq.mmu$Freq[m]
m = match(reaction.rat$ChEBI_ID, freq.rno$Var1)
reaction.rat$ChEBI_Freq = freq.rno$Freq[m]
write.table(reaction.human, "final_parsed_info/Reactome_reaction_HSA.txt", quote = F, sep = "\t", na = "", row.names = F)
write.table(reaction.mouse, "final_parsed_info/Reactome_reaction_MMU.txt", quote = F, sep = "\t", na = "", row.names = F)
write.table(reaction.rat, "final_parsed_info/Reactome_reaction_RNO.txt", quote = F, sep = "\t", na = "", row.names = F)
# Count numbers of metabolites/proteins under "Metabolism"
tmp = reaction.human[grepl("Metabolism", reaction.human$TopPathway), ]
tmp = reaction.human
length(unique(tmp$ChEBI_ID))
length(unique(tmp$UniProt))
tmp = reaction.mouse
length(unique(tmp$ChEBI_ID))
length(unique(tmp$UniProt))
tmp = reaction.rat
length(unique(tmp$ChEBI_ID))
length(unique(tmp$UniProt))
# Later check if all proteins from metabolism-pathways are mapped
xx = is.na(reaction$UniProt) & is.na(reaction$ChEBI_ID) &
reaction$participant_type == "EntityWithAccessionedSequence"
missing = reaction[xx,]
View(missing)
# Later check if all proteins from metabolism-pathways are mapped
tmp = reaction.human[grepl("Metabolism", reaction.human$TopPathway), ]
xx = is.na(tmp$UniProt) & is.na(tmp$ChEBI_ID) &
tmp$participant_type == "EntityWithAccessionedSequence"
missing = tmp[xx,]
